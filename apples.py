import functools
import operator
import tkinter as tk
from tkinter import ttk, messagebox

def calculate_nim_sum(piles):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ù–∏–º-—Å—É–º–º—É (XOR-—Å—É–º–º—É) –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫—É—á–µ–∫."""
    if not piles:
        return 0
    return functools.reduce(operator.xor, piles)

def find_optimal_move(piles):
    """–ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–¥ –≤ –∏–≥—Ä–µ –ù–∏–º."""
    valid_piles = [p for p in piles if p is not None and p > 0]
    if not valid_piles:
        return None, None, True  # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞

    nim_sum = calculate_nim_sum(valid_piles)

    if nim_sum == 0:
        for i, pile_size in enumerate(piles):
            if pile_size is not None and pile_size > 0:
                return i, 1, False  # –õ—é–±–æ–π —Ö–æ–¥ (–ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
        return None, None, True

    for i, pile_size in enumerate(piles):
        if pile_size is None or pile_size <= 0:
            continue

        target_size = pile_size ^ nim_sum
        if target_size < pile_size:
            amount_to_take = pile_size - target_size
            return i, amount_to_take, False

    return None, None, False

def get_pile_name(index):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–Ω–¥–µ–∫—Å –∫—É—á–∫–∏ (0-3) –≤ –∏–º—è (A-D)."""
    return chr(ord('A') + index)

def int_to_binary(n, width=5):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —á–∏—Å–ª–æ –≤ –¥–≤–æ–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π."""
    return bin(n)[2:].zfill(width)

class NimApp:
    def __init__(self, master):
        self.master = master
        master.title("–ü–æ–¥—Å–∫–∞–∑—á–∏–∫ –¥–ª—è –∏–≥—Ä—ã –ù–∏–º")
        master.geometry("750x550")
        master.minsize(550, 450)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–∞ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        master.grid_rowconfigure(4, weight=1)
        for i in range(4):
            master.grid_columnconfigure(i, weight=1)

        # –®—Ä–∏—Ñ—Ç—ã
        self.title_font = ("Arial", 12, "bold")
        self.result_font = ("Courier New", 12)
        self.bold_font = ("Courier New", 12, "bold")
        self.details_font = ("Arial", 9)
        self.button_font = ("Arial", 10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(master, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–±–ª–æ–∫ –≤ –∫—É—á–∫–∞—Ö:", font=self.title_font).grid(
            row=0, column=0, columnspan=4, pady=10, sticky="nsew"
        )

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ +/-
        self.pile_entries = []
        self.current_piles = [tk.StringVar(master, value='0') for _ in range(4)]

        for i in range(4):
            frame = ttk.Frame(master)
            frame.grid(row=2, column=i, padx=5, pady=5, sticky="nsew")

            # –ö–Ω–æ–ø–∫–∞ "-1"
            btn_minus = ttk.Button(
                frame, text="-", width=2,
                command=lambda idx=i: self.adjust_pile(idx, -1)
            )
            btn_minus.pack(side=tk.LEFT, fill=tk.Y)

            # –ü–æ–ª–µ –≤–≤–æ–¥–∞
            entry = ttk.Entry(
                frame, width=5, textvariable=self.current_piles[i],
                font=self.result_font, justify=tk.CENTER
            )
            entry.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
            entry.bind("<FocusIn>", self.handle_focus_in)
            entry.bind("<KeyRelease>", self.validate_entry)
            self.pile_entries.append(entry)

            # –ö–Ω–æ–ø–∫–∞ "+1"
            btn_plus = ttk.Button(
                frame, text="+", width=2,
                command=lambda idx=i: self.adjust_pile(idx, +1)
            )
            btn_plus.pack(side=tk.LEFT, fill=tk.Y)

            # –ú–µ—Ç–∫–∞ –∫—É—á–∫–∏
            label = tk.Label(master, text=f"–ö—É—á–∫–∞ {get_pile_name(i)}:", font=self.result_font)
            label.grid(row=1, column=i, padx=5, pady=5, sticky="ew")

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á–µ—Ç–∞
        self.calculate_button = ttk.Button(
            master, text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ö–æ–¥", command=self.calculate_move, style="TButton"
        )
        self.calculate_button.grid(row=3, column=0, columnspan=4, pady=15, sticky="nsew")

        # –ü–æ–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        self.result_frame = ttk.Frame(master)
        self.result_frame.grid(row=4, column=0, columnspan=4, pady=10, padx=10, sticky="nsew")

        self.result_text = tk.Text(
            self.result_frame, wrap=tk.WORD, font=self.result_font, height=10, padx=5, pady=5
        )
        self.result_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        scrollbar = ttk.Scrollbar(self.result_frame, command=self.result_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.result_text.config(yscrollcommand=scrollbar.set)

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"
        self.details_button = ttk.Button(
            master, text="–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞", command=self.toggle_details
        )
        self.details_button.grid(row=5, column=0, columnspan=4, pady=5, sticky="ew")
        self.details_shown = False

    def handle_focus_in(self, event):
        """–í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ø–æ–ª–µ, –µ—Å–ª–∏ —Ç–∞–º '0'."""
        entry = event.widget
        if entry.get() == "0":
            entry.select_range(0, tk.END)

    def validate_entry(self, event):
        """–ó–∞–º–µ–Ω—è–µ—Ç –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –Ω–∞ '0' –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥."""
        entry = event.widget
        text = entry.get()
        
        if not text:
            entry.insert(0, "0")
        elif not text.isdigit():
            # –£–¥–∞–ª—è–µ–º –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
            entry.delete(0, tk.END)
            entry.insert(0, "".join(filter(str.isdigit, text)))

    def adjust_pile(self, pile_idx, delta):
        """–ò–∑–º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—á–∫–∏ –Ω–∞ +/-1 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –º–∏–Ω–∏–º—É–º 0."""
        current_val = int(self.current_piles[pile_idx].get())
        new_val = max(0, current_val + delta)
        self.current_piles[pile_idx].set(str(new_val))

    def toggle_details(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞."""
        self.details_shown = not self.details_shown
        self.details_button.config(
            text="–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏" if self.details_shown else "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏"
        )
        self.calculate_move()

    def calculate_move(self):
        piles = []
        try:
            for i in range(4):
                val = self.current_piles[i].get()
                piles.append(int(val) if val else 0)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞!")
            return

        current_nim_sum = calculate_nim_sum([p for p in piles if p > 0])
        pile_index, amount_to_take, game_over = find_optimal_move(piles)

        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)

        if game_over:
            self.result_text.insert(tk.END, "üéÆ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í—Å–µ –∫—É—á–∫–∏ –ø—É—Å—Ç—ã.\n")
        elif pile_index is None:
            self.result_text.insert(tk.END, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ö–æ–¥.\n")
        elif current_nim_sum == 0:
            pile_name = get_pile_name(pile_index)
            self.result_text.insert(tk.END, "‚ö†Ô∏è –í—ã –≤ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (–ù–∏–º-—Å—É–º–º–∞ = 0).\n\n", "bold")
            self.result_text.insert(tk.END, f"–õ—é–±–æ–π —Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∑—è—Ç—å 1 –∏–∑ {pile_name}) ", "bold")
            self.result_text.insert(tk.END, "–¥–∞—Å—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç—É –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ.\n", "bold")
        else:
            pile_name = get_pile_name(pile_index)
            self.result_text.insert(tk.END, "‚úÖ ", "bold")
            self.result_text.insert(tk.END, "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–¥:\n", "bold")
            self.result_text.insert(tk.END, f"‚û° –í–æ–∑—å–º–∏—Ç–µ {amount_to_take} –∏–∑ –∫—É—á–∫–∏ {pile_name}\n\n", "bold")
            
            new_piles = list(piles)
            new_piles[pile_index] -= amount_to_take
            new_state = ", ".join([f"{get_pile_name(i)}={new_piles[i]}" for i in range(4)])
            self.result_text.insert(tk.END, f"–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}\n")

        if self.details_shown:
            self.add_detailed_calculation(piles, current_nim_sum, pile_index, amount_to_take)

        self.result_text.tag_config("bold", font=self.bold_font)
        self.result_text.tag_config("details_title", font=("Arial", 10, "bold"))
        self.result_text.tag_config("details_subtitle", font=("Arial", 9, "bold"))
        self.result_text.tag_config("details", font=("Courier New", 9))
        self.result_text.config(state=tk.DISABLED)

    def add_detailed_calculation(self, piles, nim_sum, move_idx, move_amount):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        self.result_text.insert(tk.END, "\n--- –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ ---\n", "details_title")
        
        # –î–≤–æ–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        self.result_text.insert(tk.END, "–î–≤–æ–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è:\n", "details_subtitle")
        for i, pile in enumerate(piles):
            bin_str = int_to_binary(pile)
            self.result_text.insert(tk.END, f"{get_pile_name(i)}: {pile} = {bin_str}\n", "details")
        
        # –ù–∏–º-—Å—É–º–º–∞
        self.result_text.insert(tk.END, "\n–ù–∏–º-—Å—É–º–º–∞ (XOR –≤—Å–µ—Ö –∫—É—á–µ–∫):\n", "details_subtitle")
        bin_nim_sum = int_to_binary(nim_sum)
        self.result_text.insert(tk.END, f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {nim_sum} = {bin_nim_sum}\n", "details")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è
        self.result_text.insert(tk.END, "\n–°—Ç—Ä–∞—Ç–µ–≥–∏—è:\n", "details_subtitle")
        if nim_sum == 0:
            self.result_text.insert(tk.END, "‚Ä¢ –ù–∏–º-—Å—É–º–º–∞ = 0 ‚Üí —ç—Ç–æ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è.\n", "details")
            self.result_text.insert(tk.END, "‚Ä¢ –ï—Å–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –æ—à–∏–±—ë—Ç—Å—è, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ.\n", "details")
        else:
            self.result_text.insert(tk.END, "‚Ä¢ –ù–∏–º-—Å—É–º–º–∞ ‚â† 0 ‚Üí –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å.\n", "details")
            self.result_text.insert(tk.END, f"‚Ä¢ –ë–µ—Ä—ë–º {move_amount} –∏–∑ {get_pile_name(move_idx)}, —á—Ç–æ–±—ã –æ–±–Ω—É–ª–∏—Ç—å —Å—É–º–º—É.\n", "details")
            self.result_text.insert(tk.END, "‚Ä¢ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç –æ–∫–∞–∂–µ—Ç—Å—è –≤ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.\n", "details")

if __name__ == "__main__":
    root = tk.Tk()
    style = ttk.Style()
    style.configure("TButton", font=("Arial", 10, "bold"))
    app = NimApp(root)
    root.mainloop()